\name{capture_first_melt_multiple}
\alias{capture_first_melt_multiple}
\title{Capture and melt multiple columns of different types}
\description{Extract first match of a regex from data.frame column names, by
calling \code{\link{capture_first_vec}} on column names. Each unique value
captured in the \code{\link{group}} named "column" will become a column name
in the result. Internally we call \code{\link[data.table]{melt.data.table}} with
measure.vars=a named list generated by the regex; this syntax can
be less repetitive than using \code{\link[data.table]{patterns}}.}
\usage{capture_first_melt_multiple(subject.df, ..., id.vars = NULL, 
    value.factor = TRUE)}
\arguments{
  \item{subject.df}{The data.frame with column name subjects.}
  \item{\dots}{Pattern passed to \code{\link{capture_first_vec}}. There must be an argument
named "column" and at least one other named argument.}
  \item{id.vars}{columns to use as \code{id.vars} in \code{\link[data.table]{melt.data.table}}. Default
NULL means to use all variables not matched by the pattern.}
  \item{value.factor}{default TRUE, passed to \code{\link[data.table]{melt.data.table}}.}
}

\value{Data table of melted/tall data, with a new column for each unique
value of the capture \code{\link{group}} named "column".}

\author{Toby Dylan Hocking}




\examples{

  ## Example 1: melting to multiple value columns.
  library(data.table)
  iris.dt <- data.table(i=1:nrow(iris), iris)
  iris.dt[, chr := paste(Species)]
  print(iris.dt)

  ## what if we had two observations on each row?
  set.seed(1)
  iris.rand <- iris.dt[sample(.N)]
  iris.wide <- cbind(treatment=iris.rand[1:75], control=iris.rand[76:150])
  print(iris.wide, topn=2, nrows=10)

  ## This is the usual data.table syntax for getting the original iris back.
  iris.melted <- melt(iris.wide, value.factor=TRUE, measure.vars = patterns(
    i="i$",
    chr="chr$",
    Sepal.Length="Sepal.Length$",
    Sepal.Width="Sepal.Width$",
    Petal.Length="Petal.Length$",
    Petal.Width="Petal.Width$",
    Species="Species$"))
  identical(iris.melted[order(i), names(iris.dt), with=FALSE], iris.dt)

  ## nc can do the same thing -- you must define an R argument named
  ## variable, and another named argument which identifies each group.
  (nc.melted <- nc::capture_first_melt_multiple(
    iris.wide,
    group="[^.]+",
    "[.]",
    column=".*"))
  identical(nc.melted[order(i), names(iris.dt), with=FALSE], iris.dt)

  ## Example 2. Lots of column types, from example(melt.data.table).
  DT <- data.table(
    i_1 = c(1:5, NA),
    i_2 = c(NA,6:10),
    f_1 = factor(sample(c(letters[1:3], NA), 6, TRUE)),
    f_2 = factor(c("z", "a", "x", "c", "x", "x"), ordered=TRUE),
    c_1 = sample(c(letters[1:3], NA), 6, TRUE),
    d_1 = as.Date(c(1:3,NA,4:5), origin="2013-09-01"),
    d_2 = as.Date(6:1, origin="2012-01-01"))
  ## add a couple of list cols
  DT[, l_1 := DT[, list(c=list(rep(i_1, sample(5,1)))), by = i_1]$c]
  DT[, l_2 := DT[, list(c=list(rep(c_1, sample(5,1)))), by = i_1]$c]

  ## original DT syntax is quite repetitive.
  melt(DT, measure=patterns(
    i="^i",
    f="^f",
    d="^d",
    l="^l"
  ), value.factor=TRUE)

  ## nc syntax uses a single regex rather than four.
  nc::capture_first_melt_multiple(
    DT,
    column="^[^c]",
    "_",
    number="[12]")

  ## id.vars can be specified using original DT syntax.
  melt(DT, id=1:2, measure=patterns(
    f="^f",
    l="^l"
  ), value.factor=TRUE)

  ## id.vars can also be specified using nc syntax.
  nc::capture_first_melt_multiple(
    DT,
    column="^[fl]",
    "_",
    number="[12]",
    id.vars=1:2)

  ## Example 3, from data.table vignette.
  D2 <- fread(text="
family_id age_mother dob_child1 dob_child2 dob_child3 gender_child1 gender_child2 gender_child3
1         30 1998-11-26 2000-01-29         NA             1             2            NA
2         27 1996-06-22         NA         NA             2            NA            NA
3         26 2002-07-11 2004-04-05 2007-09-02             2             2             1
4         32 2004-10-10 2009-08-27 2012-07-21             1             1             1
5         29 2000-12-05 2005-02-28         NA             2             1            NA")
  melt(D2, variable.name="child", measure = patterns(
    dob="^dob", gender="^gender"
  ))

  ## nc::field can be used to define group name and pattern at the
  ## same time, to avoid repetitive code.
  nc::capture_first_melt_multiple(
    D2,
    column="[^_]+",
    "_",
    nc::field("child", "", "[1-3]"))

}
